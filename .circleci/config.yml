version: 2.1
commands:
  destroy_environment:
    steps:
      - run: echo "destroy environment running"
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      - destroy_environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fb:02:ec:27:3b:20:71:6b:c6:a1:7c:bb:96:d6:bf:39"]
      - attach_workspace:
          at: /tmp
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip

          #  exit 1
      - run:
          name: Configure server using Ansible 'configure-server.yml'
          command: |
            cat /tmp/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i /tmp/inventory.txt configure-server.yml
          #  exit 1
      # Here's where you will add some code to rollback on failure
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            touch migrations_dump.txt
            echo "has been executed successfully." > migrations_dump.txt
            cat migrations_dump.txt
            pwd
            ls -lart
        #npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
               curl https://kvdb.io/P6itoQuxnsx6qtXS1nSRyQ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' --insecure
            fi
      # Here's where you will add some code to rollback on failure
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install tar gzip ansible utility
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
                awscli \
            && rm -rf /var/cache/apk/*

      # double check the above pip dependency is required!
      - attach_workspace:
          at: /tmp
      - run:
          name: Get backend url
          command: |
            ls -lrt /tmp/
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-8b022f5" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      # Update the hardcoded value to workflow ID after testing above!
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            apk add --update npm
            npm install --save-dev webpack-cli
            npm run build
            tar -czvf artifact-8b022f5.tar.gz dist
            aws s3 cp dist s3://udapeople-8b022f5 --recursive
      #REMOVE hardcoded valued above after testing!
      # Here's where you will add some code to rollback on failure, reference destroy-
      - destroy_environment
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["fb:02:ec:27:3b:20:71:6b:c6:a1:7c:bb:96:d6:bf:39"]
      - attach_workspace:
          at: /tmp
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
            apk add --no-cache \
                python3 \
                py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
                awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Deploy backend
          command: |
            cd backend
            apk add --update npm
            npm install --save-dev webpack-cli
            npm run build
            cd ..
            pwd
            ls -lart
      - run:
          command: |
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            aws s3 cp artifact.tar.gz s3://udapeople-8b022f5 --recursive
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat /tmp/inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
  write-inventory:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: pwd
      - run: ls -la
      - checkout
      - run: ls -la
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-8b022f5" \
              --output text >> .circleci/ansible/inventory.txt
      #update this to workflowid after testing complete
      - run: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
  retrieve-inventory:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: pwd
      - run: ls -l /tmp/
      - attach_workspace:
          at: /tmp
      - run: echo "inventory contents saved to persistent storage with backend ID..."
      - run: pwd
      - run: cat /tmp/inventory.txt
      - run: ls -la /tmp/
workflows:
  default:
    jobs:
      #     - build-frontend
      #     - build-backend
      #     - test-frontend:
      #         requires: [build-frontend]
      #     - test-backend:
      #         requires: [build-backend]
      #     - scan-backend:
      #         requires: [build-backend]
      #     - scan-frontend:
      #         requires: [build-frontend]
      #     - deploy-infrastructure:
      #         requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     - configure-infrastructure:
      #         requires: [deploy-infrastructure]
      #- deploy-infrastructure
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      #- run-migrations
      #  requires: [configure-infrastructure]
      #- deploy-frontend
      - write-inventory
      - deploy-backend:
          requires: [write-inventory]
